#+Title:
#+AUTHOR:
#+OPTIONS: toc:nil
#+LATEX_HEADER: \usepackage{fullpage}
#+LATEX_HEADER: \newcommand{\HRule}{\rule{\linewidth}{0.5mm}} 

\input{Title}

\tableofcontents

\pagebreak

* Description

  Our application seeks to fill the needs of students
  everywhere. ZhangBank's goal is to organize class material study
  guides; basically anything that can help the class rise up and meet
  the expectations of their Professors. Identifiable entities include
  user accounts, Roles, Documents (in many formats), Courses,
  Professors, and semesters. An organized way to find and view
  Documents will be implemented, as well as add content. A user's
  profile will keep track of which Courses students are taking or are
  interested in. An interesting problem would be correctly displaying
  each arbitrary Document. Data for our application can be generated
  from our own Courses and other free online Courses.
  
* Design

  #+CAPTION: ER Diagram
  [[file:ERDiagram.png]]
  
** Users
   
   Each User creates a username a password during account creation, a
   security salt is also generated with each account. User can be
   identified uniquely by an assigned id.

   All Users have one Role associated with it to allow authorization
   of application management.  All Users can take many Courses which
   will allow Users to keep track of the Documents of the Courses
   they're taking. Each User can upload many Documents. The Documents
   they own can be managed by them.

** Roles

   A list of Roles is maintained, each with different capabilities in
   our application.  Normal Users can add and manage their own
   Documents. An admin can manage all Documents, Courses, and
   Professors.  It's identified by a generated id and a provided name.

   Each Role can have many Users to allow roll based authorization.

** Documents

   Each Document has a type associated with it to allow the
   application to display Documents appropriately. It stores the date
   submitted to help with organization in the application and can be
   uniquely identified by a generated id.

   All Documents are owned by one User each, the original
   uploader. All Documents belong to one Course each. This allows for
   the indexing of Documents by Course. All Documents can have many
   tags each. This allows documents to be organized in a tag based
   fashion.

** Tags

   Each tag has a provided name and an id. This allows for an indexing
   of tags by name.  Every tag has multiple Documents each. This
   allows Documents to be organized for each course.

** Professors

   The Professor entity has two primary attributes, a provided name
   and a generated id.
   
   Each Professor entity Teaches many Courses. This will allow Users
   to run a search on a specific Professor to view Documentation for
   any Course that he may have previously taught.

** Courses

   The Course entity has four primary attributes; a provided name, a
   generated id, the semester the course is held, and a provided
   course number.

   All Courses are Taught by one Professor each to allow the indexing of
   Documents based on Professor. Each Course has many Documents to
   provide indexing of Documents based on each Course. All Courses
   are Taken by many Users each. This allows for Users to save which
   classes they're taking.

* Relational Schema

  #+CAPTION: Schema Diagram
  [[file:Schema.png]]

** User Table

   #+CAPTION: User Table
   | _id_ | username | password | salt |
   | /    | <        | <        | <    |

*** Keys
    
    Primary key: id\\
    Candidate keys: id, username\\

*** Functional Dependencies

    id \rightarrow username, password, salt\\
    username \rightarrow id, password, salt


*** Normal Form

    BCNF

** Role Table

   #+CAPTION: Role Table
   | _id_ | name |
   | /    | <    |

*** Keys
    
    Primary key: id\\
    Candidate keys: id, name

*** Functional Dependencies

    id \rightarrow name


*** Normal Form

    BCNF

** UserRoles Table

   #+CAPTION: UserRole Table
   | _*user\_id*_ | *role\_id* |
   | /            | <          |

*** Keys
    
    Primary key: user\_id\\
    Candidate keys: user\_id\\
    Foreign keys: user\_id \rightarrow User.id, role\_id \rightarrow Role.id

*** Functional Dependencies

    user\_id \rightarrow role\_id
    

*** Normal Form

    BCNF

** Professor Table

   #+CAPTION: Professor Table
   | _id_ | name |
   | /    | <    |

*** Keys
    
    Primary key: id\\
    Candidate keys: id

*** Functional Dependencies

    id \rightarrow name\\

*** Normal Form
    
    BCNF

** Course Table
   
   #+CAPTION: Course Table
   | _id_ | course\_no. | name | semester |
   | /    | <           | <    | <        |

*** Keys
    
    Primary key: id\\
    Candidate keys: id

*** Functional Dependencies

    id \rightarrow course\_no, name, semester


*** Normal Form

    BCNF

** Takes Table

   #+CAPTION: Takes Table
   | _id_ | *course\_id* | *user\_id* |
   | /    | <            | <          |

*** Keys
    
    Primary key: id\\    
    Candidate keys: id\\
    Foreign keys: course\_id \rightarrow Course.id, user\_id \rightarrow User.id

*** Functional Dependencies

    id \rightarrow course\_id, user\_id


*** Normal Form

    BCNF

** Teaches Table

   #+CAPTION: Teaches Table
   | _*course\_id*_ | *professor\_id* |
   | /              | <               |

*** Keys
    
    Primary key: course\_id\\    
    Candidate keys: course\_id\\
    Foreign keys: course\_id \rightarrow Couse.id , professor\_id \rightarrow Professor.id

*** Functional Dependencies

    id \rightarrow course\_id, professor\_id


*** Normal Form

    BCNF

** Document Table

   #+CAPTION: Document Table
   | _id_ | type | date\_submitted |
   | /    | <    | <               |

*** Keys
    
    Primary key: id\\
    Candidate keys: id

*** Functional Dependencies

    id \rightarrow type, date\_submitted


*** Normal Form

    BCNF 

** UserDocs Table

   #+CAPTION: UserDoc Table
   | *document\_id* | *user\_id* |
   | /              | <          |

*** Keys
    
    Primary key: document\_id\\
    Candidate keys: document\_id\\
    Foreign keys: document\_id \rightarrow Document.id, user\_id \rightarrow User.id

*** Functional Dependencies

    document\_id \rightarrow user\_id


*** Normal Form

    BCNF

** Tag Table

   #+CAPTION: Tag Table
   | _id_ | name |
   | /    | <    |

*** Keys
    
    Primary key: id\\
    Candidate keys: id, name

*** Functional Dependencies

    id \rightarrow name


*** Normal Form

    BCNF

** DocTag Table

   #+CAPTION: DocTag Table
   | _id_ | *document\_id* | *tag\_id* |
   | /    | <              | <         |
   
*** Keys
    
    Primary key: id\\
    Candidate keys: id\\
    Foreign keys: document\_id \rightarrow Document.id, tag\_id \rightarrow Tag.id

*** Functional Dependencies
    
    id \rightarrow document\_id, tag\_id

*** Normal Form

    BCNF
    
* Database
  
** TODO User

   1. "You should be able to use nextval without using a trigger. What
      if the insert failed after souce row has ben inserted? Where's
      sequence definition?

#+BEGIN_SRC sql
  CREATE TABLE  "USERS" 
     (    "ID" NUMBER NOT NULL ENABLE, 
          "SALT" VARCHAR2(45) NOT NULL ENABLE, 
          "PW" VARCHAR2(45) NOT NULL ENABLE, 
          "USERNAME" VARCHAR2(50) NOT NULL ENABLE, 
           CONSTRAINT "USERS_PK" PRIMARY KEY ("ID") ENABLE
     )
  /
  
  CREATE OR REPLACE TRIGGER  "BI_USERS" 
    before insert on "USERS"               
    for each row  
  begin   
      select "USERS_SEQ".nextval into :NEW.ID from dual; 
  end; 
  
  /
  ALTER TRIGGER  "BI_USERS" ENABLE
  /
#+END_SRC

** Role

#+BEGIN_SRC sql
  CREATE TABLE  "ROLE" 
     (    "ID" NUMBER, 
          "NAME" VARCHAR2(45), 
           CONSTRAINT "ROLE_PK" PRIMARY KEY ("ID") ENABLE
     )
  /
  
  CREATE OR REPLACE TRIGGER  "BI_ROLE" 
    before insert on "ROLE"               
    for each row  
  begin   
      select "ROLE_SEQ".nextval into :NEW.ID from dual; 
  end; 
  
  /
  ALTER TRIGGER  "BI_ROLE" ENABLE
  /
#+END_SRC

** UserRoles

#+BEGIN_SRC sql
  CREATE TABLE  "USERROLE" 
     (    "USER_ID" NUMBER NOT NULL ENABLE, 
          "ROLE_ID" NUMBER NOT NULL ENABLE, 
           CONSTRAINT "USERROLE_PK" PRIMARY KEY ("USER_ID") ENABLE, 
           CONSTRAINT "USERROLE_FK" FOREIGN KEY ("USER_ID")
            REFERENCES  "USERS" ("ID") ENABLE, 
           CONSTRAINT "USERROLE_FK2" FOREIGN KEY ("ROLE_ID")
            REFERENCES  "ROLE" ("ID") ENABLE
     )
  /
  
  CREATE OR REPLACE TRIGGER  "BI_USERROLE" 
    before insert on "USERROLE"               
    for each row  
  begin   
      select "USERROLE_SEQ".nextval into :NEW.USER_ID from dual; 
  end; 
  
  /
  ALTER TRIGGER  "BI_USERROLE" ENABLE
  /
#+END_SRC

** Professor

#+BEGIN_SRC sql
  CREATE TABLE  "PROFESSOR" 
     (    "NAME" VARCHAR2(50) NOT NULL ENABLE, 
          "ID" NUMBER(*,0) NOT NULL ENABLE, 
          "DEGREE" VARCHAR2(45), 
           PRIMARY KEY ("ID") ENABLE
     )
  /
#+END_SRC

** Course

#+BEGIN_SRC sql
  CREATE TABLE  "COURSE" 
     (    "SEMESTER" VARCHAR2(10) NOT NULL ENABLE, 
          "ID" NUMBER(*,0) NOT NULL ENABLE, 
          "TITLE" VARCHAR2(45) NOT NULL ENABLE, 
          "COURSENUMBER" VARCHAR2(45) NOT NULL ENABLE, 
          "ACADEMICLEVEL" NUMBER, 
          "SUBJECT" VARCHAR2(50) NOT NULL ENABLE, 
           PRIMARY KEY ("ID") ENABLE
     )
  /
#+END_SRC

** Takes

#+BEGIN_SRC sql
  CREATE TABLE  "TAKES" 
     (    "COURSEID" NUMBER NOT NULL ENABLE, 
          "ID" NUMBER NOT NULL ENABLE, 
          "USERID" NUMBER NOT NULL ENABLE, 
           CONSTRAINT "TAKES_PK" PRIMARY KEY ("ID") ENABLE, 
           CONSTRAINT "TAKES_FK" FOREIGN KEY ("COURSEID")
            REFERENCES  "COURSE" ("ID") ENABLE, 
           CONSTRAINT "TAKES_FK2" FOREIGN KEY ("USERID")
            REFERENCES  "USERS" ("ID") ENABLE
     )
  /
  
  CREATE OR REPLACE TRIGGER  "BI_TAKES" 
    before insert on "TAKES"               
    for each row  
  begin   
      select "TAKES_SEQ".nextval into :NEW.ID from dual; 
  end; 
  
  /
  ALTER TRIGGER  "BI_TAKES" ENABLE
  /
#+END_SRC

** Teaches

#+BEGIN_SRC sql
  CREATE TABLE  "TEACHES" 
     (    "PROFID" NUMBER NOT NULL ENABLE, 
          "COURSEID" NUMBER NOT NULL ENABLE, 
           CONSTRAINT "TEACHES_FK" FOREIGN KEY ("PROFID")
            REFERENCES  "PROFESSOR" ("ID") ENABLE, 
           CONSTRAINT "TEACHES_FK2" FOREIGN KEY ("COURSEID")
            REFERENCES  "COURSE" ("ID") ENABLE
     )
  /
  
  CREATE OR REPLACE TRIGGER  "BI_TEACHES" 
    before insert on "TEACHES"               
    for each row  
  begin   
      select "TEACHES_SEQ".nextval into :NEW.ID from dual; 
  end; 
  
  /
  ALTER TRIGGER  "BI_TEACHES" ENABLE
  /
  
#+END_SRC

** UserDocs

#+BEGIN_SRC sql
  CREATE TABLE  "USERDOC" 
     (    "DOCUMENT_ID" NUMBER NOT NULL ENABLE, 
          "USER_ID" NUMBER NOT NULL ENABLE, 
           CONSTRAINT "USERDOC_PK" PRIMARY KEY ("DOCUMENT_ID") ENABLE, 
           CONSTRAINT "USERDOC_FK" FOREIGN KEY ("DOCUMENT_ID")
            REFERENCES  "DOCUMENT" ("ID") ENABLE, 
           CONSTRAINT "USERDOC_FK2" FOREIGN KEY ("USER_ID")
            REFERENCES  "USERS" ("ID") ENABLE
     )
  /
  
  CREATE OR REPLACE TRIGGER  "BI_USERDOC" 
    before insert on "USERDOC"               
    for each row  
  begin   
      select "USERDOC_SEQ".nextval into :NEW.DOCUMENT_ID from dual; 
  end; 
  
  /
  ALTER TRIGGER  "BI_USERDOC" ENABLE
  /
#+END_SRC

** Tag

#+BEGIN_SRC sql
  CREATE TABLE  "TAG" 
     (    "ID" NUMBER NOT NULL ENABLE, 
          "NAME" VARCHAR2(45) NOT NULL ENABLE, 
           CONSTRAINT "TAG_PK" PRIMARY KEY ("ID") ENABLE
     )
  /
  
  CREATE OR REPLACE TRIGGER  "BI_TAG" 
    before insert on "TAG"               
    for each row  
  begin   
      select "TAG_SEQ".nextval into :NEW.ID from dual; 
  end; 
  
  /
  ALTER TRIGGER  "BI_TAG" ENABLE
  /
#+END_SRC

** DocTag

#+BEGIN_SRC sql
  CREATE TABLE  "DOCTAG" 
     (    "ID" NUMBER NOT NULL ENABLE, 
          "DOCUMENT_ID" NUMBER NOT NULL ENABLE, 
          "TAG_ID" NUMBER NOT NULL ENABLE, 
           CONSTRAINT "DOCTAG_PK" PRIMARY KEY ("ID") ENABLE, 
           CONSTRAINT "DOCTAG_FK" FOREIGN KEY ("DOCUMENT_ID")
            REFERENCES  "DOCUMENT" ("ID") ENABLE, 
           CONSTRAINT "DOCTAG_FK2" FOREIGN KEY ("TAG_ID")
            REFERENCES  "TAG" ("ID") ENABLE
     )
  /
  
  CREATE OR REPLACE TRIGGER  "BI_DOCTAG" 
    before insert on "DOCTAG"               
    for each row  
  begin   
      select "DOCTAG_SEQ".nextval into :NEW.ID from dual; 
  end; 
  
  /
  ALTER TRIGGER  "BI_DOCTAG" ENABLE
  /
#+END_SRC

* TODO Views

  1. Why are these views?

** Takes

#+BEGIN_SRC sql
  select   "COURSE"."ID" as "ID",
           "COURSE"."SEMESTER" as "SEMESTER",
           "COURSE"."TITLE" as "TITLE",
           "COURSE"."COURSENUMBER" as "COURSENUMBER",
           "COURSE"."ACADEMICLEVEL" as "ACADEMICLEVEL",
           "COURSE"."SUBJECT" as "SUBJECT",
           "TAKES"."ID" as "ID",
           "TAKES"."COURSEID" as "COURSEID",
           "TAKES"."USERID" as "USERID",
           "USERS"."ID" as "ID_1",
           "USERS"."SALT" as "SALT",
           "USERS"."PW" as "PW",
           "USERS"."USERNAME" as "USERNAME" 
   from    "USERS" "USERS",
           "TAKES" "TAKES",
           "COURSE" "COURSE"
#+END_SRC   

** UserDocs

#+BEGIN_SRC sql
  select   "USERS"."ID" as "ID",
           "USERS"."PW" as "PW",
           "USERS"."SALT" as "SALT",
           "USERS"."USERNAME" as "USERNAME",
           "USERDOC"."DOCUMENT_ID" as "DOCUMENT_ID",
           "USERDOC"."USER_ID" as "USER_ID",
           "DOCUMENT"."ID" as "ID",
           "DOCUMENT"."TYPE" as "TYPE" 
   from    "DOCUMENT" "DOCUMENT",
           "USERDOC" "USERDOC",
           "USERS" "USERS"
#+END_SRC

** Document Tags
#+BEGIN_SRC sql
  select   "DOCUMENT"."ID" as "ID",
           "DOCUMENT"."TYPE" as "TYPE",
           "DOCTAG"."ID" as "ID",
           "DOCTAG"."DOCUMENT_ID" as "DOCUMENT_ID",
           "DOCTAG"."TAG_ID" as "TAG_ID",
           "TAG"."ID" as "ID_1",
           "TAG"."NAME" as "NAME" 
   from    "TAG" "TAG",
           "DOCTAG" "DOCTAG",
           "DOCUMENT" "DOCUMENT"
#+END_SRC

** Professor Documents

#+BEGIN_SRC sql   
  select   "PROFESSOR"."ID" as "ID",
           "DOCCOURSE"."COURSEID" as "COURSEID",
           "DOCCOURSE"."DOCID" as "DOCID",
           "COURSE"."ID" as "ID",
           "COURSE"."SEMESTER" as "SEMESTER",
           "COURSE"."TITLE" as "TITLE",
           "COURSE"."COURSENUMBER" as "COURSENUMBER",
           "COURSE"."ACADEMICLEVEL" as "ACADEMICLEVEL",
           "COURSE"."SUBJECT" as "SUBJECT",
           "DOCUMENT"."ID" as "ID_1",
           "DOCUMENT"."TYPE" as "TYPE",
           "TEACHES"."PROFID" as "PROFID",
           "TEACHES"."COURSEID" as "COURSEID",
           "PROFESSOR"."NAME" as "NAME",
           "PROFESSOR"."DEGREE" as "DEGREE" 
   from    "DOCCOURSE" "DOCCOURSE",
           "COURSE" "COURSE",
           "DOCUMENT" "DOCUMENT",
           "TEACHES" "TEACHES",
           "PROFESSOR" "PROFESSOR" 
  group by PROFESSOR.ID
#+END_SRC

** Course Docuements

#+BEGIN_SRC sql
  select   "DOCCOURSE"."COURSEID" as "COURSEID",
           "DOCCOURSE"."DOCID" as "DOCID",
           "DOCUMENT"."ID" as "ID_1",
           "DOCUMENT"."TYPE" as "TYPE",
           "COURSE"."ID" as "ID",
           "COURSE"."SEMESTER" as "SEMESTER",
           "COURSE"."TITLE" as "TITLE",
           "COURSE"."COURSENUMBER" as "COURSENUMBER",
           "COURSE"."ACADEMICLEVEL" as "ACADEMICLEVEL",
           "COURSE"."SUBJECT" as "SUBJECT" 
   from    "COURSE" "COURSE",
           "DOCCOURSE" "DOCCOURSE",
           "DOCUMENT" "DOCUMENT"
#+END_SRC

** User Roles

#+BEGIN_SRC sql
  select   "USERS"."ID" as "ID",
           "USERS"."SALT" as "SALT",
           "USERS"."PW" as "PW",
           "USERS"."USERNAME" as "USERNAME",
           "USERROLE"."USER_ID" as "USER_ID",
           "USERROLE"."ROLE_ID" as "ROLE_ID",
           "ROLE"."ID" as "ID",
           "ROLE"."NAME" as "NAME" 
   from    "ROLE" "ROLE",
           "USERROLE" "USERROLE",
           "USERS" "USERS"
#+END_SRC

* Spool
  
#+BEGIN_EXAMPLE
  SQL>   CREATE TABLE  "USERS"
    2       (    "ID" NUMBER NOT NULL ENABLE,
    3            "SALT" VARCHAR2(45) NOT NULL ENABLE,
    4            "PW" VARCHAR2(45) NOT NULL ENABLE,
    5            "USERNAME" VARCHAR2(50) NOT NULL ENABLE,
    6             CONSTRAINT "USERS_PK" PRIMARY KEY ("ID") ENABLE
    7       )
    8    /
  
  Table created.
  
  SQL> 
  SQL>   CREATE OR REPLACE TRIGGER  "BI_USERS"
    2      before insert on "USERS"
    3      for each row
    4    begin
    5        select "USERS_SEQ".nextval into :NEW.ID from dual;
    6    end;
    7  
    8    /
  
  SQL>   ALTER TRIGGER  "BI_USERS" ENABLE
    2    /
  
  Trigger altered.
  
  SQL> 
  SQL>   CREATE TABLE  "ROLE"
    2       (    "ID" NUMBER,
    3            "NAME" VARCHAR2(45),
    4             CONSTRAINT "ROLE_PK" PRIMARY KEY ("ID") ENABLE
    5       )
    6    /
  
  Table created.
  
  SQL> 
  SQL>   CREATE OR REPLACE TRIGGER  "BI_ROLE"
    2      before insert on "ROLE"
    3      for each row
    4    begin
    5        select "ROLE_SEQ".nextval into :NEW.ID from dual;
    6    end;
    7  
    8    /
  
  SQL>   ALTER TRIGGER  "BI_ROLE" ENABLE
    2    /
  
  Trigger altered.
  
  SQL> 
  SQL>   CREATE TABLE  "USERROLE"
    2       (    "USER_ID" NUMBER NOT NULL ENABLE,
    3            "ROLE_ID" NUMBER NOT NULL ENABLE,
    4             CONSTRAINT "USERROLE_PK" PRIMARY KEY ("USER_ID") ENABLE,
    5             CONSTRAINT "USERROLE_FK" FOREIGN KEY ("USER_ID")
    6              REFERENCES  "USERS" ("ID") ENABLE,
    7             CONSTRAINT "USERROLE_FK2" FOREIGN KEY ("ROLE_ID")
    8              REFERENCES  "ROLE" ("ID") ENABLE
    9       )
   10    /
  
  Table created.
  
  SQL> 
  SQL>   CREATE OR REPLACE TRIGGER  "BI_USERROLE"
    2      before insert on "USERROLE"
    3      for each row
    4    begin
    5        select "USERROLE_SEQ".nextval into :NEW.USER_ID from dual;
    6    end;
    7  
    8    /
  
  SQL>   ALTER TRIGGER  "BI_USERROLE" ENABLE
    2    /
  
  Trigger altered.
  
  SQL> 
  SQL>   CREATE TABLE  "PROFESSOR"
    2       (    "NAME" VARCHAR2(50) NOT NULL ENABLE,
    3            "ID" NUMBER(*,0) NOT NULL ENABLE,
    4            "DEGREE" VARCHAR2(45),
    5             PRIMARY KEY ("ID") ENABLE
    6       )
    7    /
  
  Table created.
  
  SQL> 

  SQL>   CREATE TABLE  "COURSE"
    2       (    "SEMESTER" VARCHAR2(10) NOT NULL ENABLE,
    3            "ID" NUMBER(*,0) NOT NULL ENABLE,
    4            "TITLE" VARCHAR2(45) NOT NULL ENABLE,
    5            "COURSENUMBER" VARCHAR2(45) NOT NULL ENABLE,
    6            "ACADEMICLEVEL" NUMBER,
    7            "SUBJECT" VARCHAR2(50) NOT NULL ENABLE,
    8             PRIMARY KEY ("ID") ENABLE
    9       )
   10    /
  
  Table created.
  
  SQL> 
  SQL>   CREATE TABLE  "TAKES"
    2       (    "COURSEID" NUMBER NOT NULL ENABLE,
    3            "ID" NUMBER NOT NULL ENABLE,
    4            "USERID" NUMBER NOT NULL ENABLE,
    5             CONSTRAINT "TAKES_PK" PRIMARY KEY ("ID") ENABLE,
    6             CONSTRAINT "TAKES_FK" FOREIGN KEY ("COURSEID")
    7              REFERENCES  "COURSE" ("ID") ENABLE,
    8             CONSTRAINT "TAKES_FK2" FOREIGN KEY ("USERID")
    9              REFERENCES  "USERS" ("ID") ENABLE
   10       )
   11    /
  
  Table created.
  
  SQL> 
  SQL>   CREATE OR REPLACE TRIGGER  "BI_TAKES"
    2      before insert on "TAKES"
    3      for each row
    4    begin
    5        select "TAKES_SEQ".nextval into :NEW.ID from dual;
    6    end;
    7  
    8    /
  
  SQL>   ALTER TRIGGER  "BI_TAKES" ENABLE
    2    /
  
  Trigger altered.
  
  SQL> 
  SQL>   CREATE TABLE  "TEACHES"
    2       (    "PROFID" NUMBER NOT NULL ENABLE,
    3            "COURSEID" NUMBER NOT NULL ENABLE,
    4             CONSTRAINT "TEACHES_FK" FOREIGN KEY ("PROFID")
    5              REFERENCES  "PROFESSOR" ("ID") ENABLE,
    6             CONSTRAINT "TEACHES_FK2" FOREIGN KEY ("COURSEID")
    7              REFERENCES  "COURSE" ("ID") ENABLE
    8       )
    9    /
  
  Table created.
  
  SQL> 
  SQL>   CREATE OR REPLACE TRIGGER  "BI_TEACHES"
    2      before insert on "TEACHES"
    3      for each row
    4    begin
    5        select "TEACHES_SEQ".nextval into :NEW.ID from dual;
    6    end;
    7  
    8    /
  
  SQL>   ALTER TRIGGER  "BI_TEACHES" ENABLE
    2    /
  
  Trigger altered.
  
  SQL> 
  SQL>   CREATE TABLE  "USERDOC"
    2       (    "DOCUMENT_ID" NUMBER NOT NULL ENABLE,
    3            "USER_ID" NUMBER NOT NULL ENABLE,
    4             CONSTRAINT "USERDOC_PK" PRIMARY KEY ("DOCUMENT_ID") ENABLE,
    5             CONSTRAINT "USERDOC_FK" FOREIGN KEY ("DOCUMENT_ID")
    6              REFERENCES  "DOCUMENT" ("ID") ENABLE,
    7             CONSTRAINT "USERDOC_FK2" FOREIGN KEY ("USER_ID")
    8              REFERENCES  "USERS" ("ID") ENABLE
    9       )
   10    /
              REFERENCES  "DOCUMENT" ("ID") ENABLE,
                          *
  SQL> 
  SQL>   CREATE OR REPLACE TRIGGER  "BI_USERDOC"
    2      before insert on "USERDOC"
    3      for each row
    4    begin
    5        select "USERDOC_SEQ".nextval into :NEW.DOCUMENT_ID from dual;
    6    end;
    7  
    8    /
      before insert on "USERDOC"
                       *
  
  SQL>   ALTER TRIGGER  "BI_USERDOC" ENABLE
    2    /
    ALTER TRIGGER  "BI_USERDOC" ENABLE
  ,*
  
  SQL> 
  SQL>   CREATE TABLE  "TAG"
    2       (    "ID" NUMBER NOT NULL ENABLE,
    3            "NAME" VARCHAR2(45) NOT NULL ENABLE,
    4             CONSTRAINT "TAG_PK" PRIMARY KEY ("ID") ENABLE
    5       )
    6    /
  
  Table created.
  
  SQL> 
  SQL>   CREATE OR REPLACE TRIGGER  "BI_TAG"
    2      before insert on "TAG"
    3      for each row
    4    begin
    5        select "TAG_SEQ".nextval into :NEW.ID from dual;
    6    end;
    7  
    8    /
  
  SQL>   ALTER TRIGGER  "BI_TAG" ENABLE
    2    /
  
  Trigger altered.
  
  SQL> 
  SQL>   CREATE TABLE  "DOCTAG"
    2       (    "ID" NUMBER NOT NULL ENABLE,
    3            "DOCUMENT_ID" NUMBER NOT NULL ENABLE,
    4            "TAG_ID" NUMBER NOT NULL ENABLE,
    5             CONSTRAINT "DOCTAG_PK" PRIMARY KEY ("ID") ENABLE,
    6             CONSTRAINT "DOCTAG_FK" FOREIGN KEY ("DOCUMENT_ID")
    7              REFERENCES  "DOCUMENT" ("ID") ENABLE,
    8             CONSTRAINT "DOCTAG_FK2" FOREIGN KEY ("TAG_ID")
    9              REFERENCES  "TAG" ("ID") ENABLE
   10       )
   11    /
              REFERENCES  "DOCUMENT" ("ID") ENABLE,
                          *
  SQL> 
  SQL>   CREATE OR REPLACE TRIGGER  "BI_DOCTAG"
    2      before insert on "DOCTAG"
    3      for each row
    4    begin
    5        select "DOCTAG_SEQ".nextval into :NEW.ID from dual;
    6    end;
    7  
    8    /
      before insert on "DOCTAG"
                       *
  SQL>   ALTER TRIGGER  "BI_DOCTAG" ENABLE
    2    /
    ALTER TRIGGER  "BI_DOCTAG" ENABLE
  ,*
  
  SQL> Spool off
#+END_EXAMPLE

* TODO SQL Queries
  
  1. Missing required queries

  Select all the Users enrolled in Systems Programming.
     
#+BEGIN_SRC sql
  select   "USERS"."ID" as "ID",
  from     "USERS" "USERS",
           "TAKES" "TAKES",
           "COURSE" "COURSE"
  where   "COURSE"."TITLE" = "Systems Programming"
#+END_SRC     

** Updates

   1. Insert tuples to a table (both single tuple and by a query);

#+BEGIN_SRC sql
  INSERT INTO COURSE
  (ID, SEMESTER, TITLE, COURSENUMBER, ACADEMICLEVEL, SUBJECT)
  VALUES
  (300, 'Fall 2010', 'Cloud Computing', '4132', 4, 'CS');
#+END_SRC

   2. Delete tuples from a table (both single tuple and by a query);

#+BEGIN_SRC sql
  SQL> DELETE FROM USERS WHERE USERNAME = 'isaac';
  
  1 row deleted.
  
  SQL> Spool off
#+END_SRC      

* Triggers
  
** Before User Delete

   Will assign all documents of user being deleted to a permanent user
   account to retain referential integrity.

#+BEGIN_SRC sql
  CREATE OR REPLACE TRIGGER  "DELETEUSER" 
  BEFORE
  delete on "USERS"
  for each row
  begin
  UPDATE USERDOC
  SET USER_ID=0
  WHERE USER_ID=:OLD.ID;
  end;
  /
  ALTER TRIGGER  "DELETEUSER" ENABLE
  /
#+END_SRC   

* TODO View Update Report
  
  1. Include a two-page report describing your experiments with view
     update including the design of the experiments, your
     observations, and your conclusions.

* TODO Function Lists
     
  1. A list of originally proposed functions and a list of actually
     implemented functions.

* TODO Program Source Code

  1. A script of your PL/SQL package. and a copy of your program
     source code.

* TODO Script and Screen Shots

  1. Include a script that shows the compilation and execution of your
     program. You should show, within a user session, all functions
     currently supported by your application. If your program provides
     a graphical user interface, include some screen shots as well.

* TODO Summary Statement of the Entire Project
     
  1. You should include a section to summarize the team's activities
     during the project; discuss your experiences with this project;
     pros and cons of your design and implementation methodology, and
     aspects of the team work. You should comment on whether and how
     this project contributes towards your learning of database
     subjects and discuss possible future extensions of your
     project. Optionally, you may comment on how each team members
     contributes to the overall project. Please be specific and
     insightful.

